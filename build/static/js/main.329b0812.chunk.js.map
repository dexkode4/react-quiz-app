{"version":3,"sources":["images/pure-julia.jpg","components/QuestionCard.styles.ts","API.tsx","components/QuestionCard.tsx","utils.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","totalQuestions","questionNr","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","key","disabled","onClick","value","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestion","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","console","log","EASY","newQuestions","message","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.329b0812.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pure-julia.3566bc37.jpg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;","import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty: string;\n\tincorrect_answers : string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = \"easy\",\n\tMEDIUM = \"medium\",\n\tHARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n\tamount: number,\n\tdifficulty: Difficulty\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json();\n\treturn data.results.map((question: Question) => ({\n\t\t...question,\n\t\tanswers: shuffleArray([\n\t\t\t...question.incorrect_answers,\n\t\t\tquestion.correct_answer,\n\t\t]),\n\t}));\n};\n","import React from 'react'\n/// types \nimport {AnswerObject} from '../App';\n// styles\nimport {Wrapper, ButtonWrapper} from './QuestionCard.styles';\n\ntype Props = {\n    question:string,\n    answers:string[],\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void,\n    userAnswer: AnswerObject | undefined,\n    questionNr:number,\n    totalQuestions:number\n}\n\nconst QuestionCard:React.FC<Props> = ({question,answers,callback,userAnswer,totalQuestions,questionNr}) => {\n    return (\n        <Wrapper>\n            <p className=\"number\">\n                Question: {questionNr} / {totalQuestions}\n            </p>\n            <p dangerouslySetInnerHTML={{__html:question}}/>\n            <div className=\"answers\" >\n                {answers.map(answer => (\n                    \n                    <ButtonWrapper \n                         correct={userAnswer?.correctAnswer === answer}\n                         userClicked = {userAnswer?.answer === answer}\n                          key = {answer}>\n                        <button disabled={!! userAnswer} onClick={callback} value={answer}>\n                            <span dangerouslySetInnerHTML={{__html:answer}}/>\n                        </button>\n                    </ButtonWrapper>\n                ))}\n            </div>\n        </Wrapper>\n    )\n}\n\nexport default QuestionCard\n","export const shuffleArray = (array:any[]) => [...array].sort(() => Math.random() - 0.5);","import styled , {createGlobalStyle} from 'styled-components';\nimport BGImage from './images/pure-julia.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    html{\n        height:100%;\n    }\n\n    body{\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin:0;\n        padding:0 20px;\n        display:flex;\n        justify-content:center;\n    }\n\n    * {\n        box-sizing:border-box;\n        font-family:'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    display:flex;\n    flex-direction: column;\n    align-items:center;\n\n    > p {\n        color: #fff;\n    }\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: Fascinate Inline;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        font-weight: 400;\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #ffffff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n      }\n      .start {\n        max-width: 200px;\n      } \n`;","import React, { useState } from \"react\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { fetchQuizQuestions } from \"./API\";\n\n// types\nimport { Difficulty, QuestionState } from \"./API\";\n//styles\n\nimport { GlobalStyle,Wrapper  } from \"./App.styles\";\n\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestion] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\t\tconsole.log(\"heyy\");\n\t\ttry {\n\t\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\t\tTOTAL_QUESTIONS,\n\t\t\t\tDifficulty.EASY\n\t\t\t);\n\n\t\t\tsetQuestion(newQuestions);\n\t\t\tsetScore(0);\n\t\t\tsetUserAnswers([]);\n\t\t\tsetNumber(0);\n\t\t\tsetLoading(false);\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message);\n\t\t}\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) { \n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer ===  answer  ;\n\n      if(correct){\n        setScore(prev => prev + 1);\n      }\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer:questions[number].correct_answer,\n      }\n\n      setUserAnswers(prev => [...prev,answerObject ])\n\n\n\t\t}\n\t};\n\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if(nextQuestion === TOTAL_QUESTIONS){\n       setGameOver(true)\n    }\n    else{\n      setNumber(nextQuestion); \n    }\n\n  };\n\n\treturn (\n    <> \n    <GlobalStyle/>\n\t\t<Wrapper>\n\t\t\t<h1>Quiz Time!</h1>\n\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t<button className=\"start\" onClick={startTrivia}>\n\t\t\t\t\tStart\n\t\t\t\t</button>\n\t\t\t) : null}\n\n      {gameOver ? null : <p className=\"score\">Score:{score}</p>}\n\t\t\t{loading && <p>Loading Question ....</p>}\n\t\t\t{!loading && !gameOver && (\n\t\t\t\t<QuestionCard\n\t\t\t\t\tquestionNr={number + 1}\n\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{!gameOver &&\n\t\t\t!loading &&\n\t\t\tuserAnswers.length === number + 1 &&\n\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\t\t\tNext Question\n\t\t\t\t</button>\n\t\t\t) : null}\n\t\t</Wrapper>\n    </>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}